{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","converter","Showdown","Converter","React","useState","EditorState","createWithContent","ContentState","createFromText","editorState","setEditorState","Grommet","full","theme","grommet","Box","direction","justify","align","Heading","Text","pad","fill","className","margin","border","width","height","onChange","dangerouslySetInnerHTML","__html","makeHtml","convertToRaw","getCurrentContent","blocks","map","block","text","trim","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SA2CeA,MArCf,WACE,IAAMC,EAAY,IAAIC,IAASC,UADlB,EAEyBC,IAAMC,SAASC,cAAYC,kBAAkBC,eAAaC,eAAe,yCAFlG,mBAENC,EAFM,KAEOC,EAFP,KASb,OACE,kBAACC,EAAA,EAAD,CAASC,MAAI,EAACC,MAAOC,KACnB,kBAACC,EAAA,EAAD,CAAKC,UAAU,SAASC,QAAQ,SAASC,MAAM,UAC7C,kBAACC,EAAA,EAAD,wCAGA,kBAACC,EAAA,EAAD,4FAIA,kBAACL,EAAA,EAAD,CAAKG,MAAM,SAASD,QAAQ,SAASI,IAAI,SAASC,KAAK,aAAaC,UAAU,kBAC5E,kBAACR,EAAA,EAAD,CAAKQ,UAAU,YACb,kBAACR,EAAA,EAAD,CAAKS,OAAO,SAASC,OAAO,MAAMC,MAAM,QAAQC,OAAO,UACrD,kBAAC,SAAD,CAAQlB,YAAaA,EAAamB,SAAUlB,MAGhD,kBAACK,EAAA,EAAD,CAAKQ,UAAU,aACb,kBAACR,EAAA,EAAD,CAAKS,OAAO,SAASC,OAAO,MAAMC,MAAM,QAAQC,OAAO,UACrD,yBAAKE,wBAAyB,CAAEC,OAAQ9B,EAAU+B,SAtB7CC,uBAAavB,EAAYwB,qBAAqBC,OAC/CC,KAAI,SAAAC,GAAK,OAAMA,EAAMC,KAAKC,OAAmBF,EAAMC,KAAf,QAAqBE,KAAK,gBCA5DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2cfa5a5c.chunk.js","sourcesContent":["import React from 'react';\nimport { Editor, EditorState, ContentState, convertToRaw } from 'draft-js';\nimport Showdown from 'showdown';\nimport 'draft-js/dist/Draft.css';\nimport { Grommet, grommet, Box, Heading, Text } from 'grommet';\n\nfunction App() {\n  const converter = new Showdown.Converter();\n  const [editorState, setEditorState] = React.useState(EditorState.createWithContent(ContentState.createFromText('### Hello this is an example editor')));\n\n  const convertToUsable = () => {\n    const blocks = convertToRaw(editorState.getCurrentContent()).blocks;\n    return blocks.map(block => (!block.text.trim() && '\\n') || block.text).join('\\n');\n  }\n\n  return (\n    <Grommet full theme={grommet} >\n      <Box direction=\"column\" justify=\"center\" align=\"center\" >\n        <Heading>\n          Custom Markdown Editor Example.\n          </Heading>\n        <Text>\n          Messing around with React Hooks and Draft.js a WSGI tool\n          from Facebook Open Source.\n          </Text>\n        <Box align=\"center\" justify=\"center\" pad=\"medium\" fill=\"horizontal\" className=\"editors-holder\" >\n          <Box className=\"leftside\" >\n            <Box margin=\"medium\" border=\"all\" width=\"large\" height=\"medium\" >\n              <Editor editorState={editorState} onChange={setEditorState} />\n            </Box>\n          </Box>\n          <Box className=\"rightside\" >\n            <Box margin=\"medium\" border=\"all\" width=\"large\" height=\"medium\" >\n              <div dangerouslySetInnerHTML={{ __html: converter.makeHtml(convertToUsable()) }} >\n              </div>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}